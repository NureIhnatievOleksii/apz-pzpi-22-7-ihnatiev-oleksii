МІНІСТЕРСТВО ОСВІТИ ТА НАУКИ УКРАЇНИ
ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ


Кафедра Програмної інженерії



ЗВІТ
З дисципліни «Архітектура програмного забезпечення»
З лабораторної роботи №2
На тему: «Серверна частина програмного застосунку»



Виконав:										 Перевірив:
Ст. гр. ПЗПІ-22-7					   			   Ст. вик. каф. ПІ
Ігнатьєв О. Г.								     Сокорчук І. П.





Харків 2025
1 ІСТОРІЯ ЗМІН
Зміни звіту наведені у таблиці 1.1
Таблиця 1.1 – Історія змін
№	Дата	Версія звіту	Опис змін
1	07.05.2025	0.1	Створено розділ «Історія змін»
2	07.05.2025	0.1	Створено розділ «Завдання»
3	07.05.2025	0.1	Створено розділ “Опис виконаної роботи”
4	07.05.2025	0.1	Створено розділ “Висновки”
5	07.05.2025	0.1	Додано додаток А
6	07.05.2025	0.1	Додано додаток Б
7	07.05.2025	0.1	Додано додаток В



2 ЗАВДАННЯ
Потрібно розробити серверну / back-end частину програмної системи.
Проаналізуйте завдання (додаток В).
Виконати контрольні завдання.
Відкрити створений на попередній лабораторній роботі репозиторій GitHub.
Створіть у репозиторії директорію Lab2 та текстовий файл з описом інженерних рішень у цій частині проєкту.
Зафіксуйте кожну внесену зміну командою git commit з відповідним коментарем та фіксуйте цією командою усі наступні зміни у проекті.
Створіть у директорії Task2 піддиректорію для програмного коду.
Створіть програмний код, завантажте його у створену піддиректорію, зафіксуйте внесені у репозиторій зміни. Виконайте функціональне тестування створеного програмного коду та створіть відеозапис цього тестування тривалістю 7-10 хвилин з усними поясненнями процесу тестування.
Завантажте створений відеозапис тестування YouTube канал для вашого облікового запису в домені @nure.ua
Створіть для завантаженого запису його хронологічний опис.
Оформіть звіт у форматі pdf та завантажте його на навчальну платформу https://dl.nure.ua/
У коментарях до завантаженого звіту вкажіть посилання на відеозапис тестування у вашому каналі YouTube.



3 ОПИС ВИКОНАНОЇ РОБОТИ
Програмна система має клієнт-серверну архітектуру. Серверна частина реалізована за допомогою фреймворку AspNetCore (.Net) на мові програмування C#. Для збереження даних використовується база даних MicrosoftSQL. Автентифікація користувачів відбувається через JWT.
Серверна частина складається з наступних модулів:
1. Авторизація та автентифікація:
Реєстрація користувачів, вхід за допомогою email/паролю або через Google та GitHub, вихід з системи.
2. Управління користувачами:
Перегляд профілю користувача, редагування даних, скидання пароля, відновлення доступу.
3. Адміністрування:
Призначення ролі адміністратора, перегляд усіх користувачів, блокування облікових записів.
4. Моніторинг якості повітря:
Збір та перегляд даних про забруднення повітря з IoT-пристроїв, персоналізовані та історичні дані.
5. Геолокаційний модуль:
Збереження та отримання інформації про місцезнаходження користувача або пристрою.

На рисунках Б.1 у додатку Б наведена діаграма прецедентів взаємодії адміністратора та користувача з системою 
На рисунку Б.2 у додатку Б наведена UML діаграми прецедентів.
На рисунку Б.3 у додатку Б наведена діаграма розгортання.
На рисунку Б.4 у додатку Б наведена діаграма діяльності.
На рисунку Б.5 у додатку Б наведена ER-діаграма.

Опис бази даних програмної системи описаний в таблицях 1-10.

Таблиця 1 – Таблиця бази даних «AirQualities»
AirQualityId        UNIQUEIDENTIFIER NOT NULL PRIMARY KEY
LocationId          UNIQUEIDENTIFIER NULL
MeasuredAt          DATETIME2(7) NOT NULL
So2                 REAL NOT NULL
DeviceId            NVARCHAR(MAX) NULL
Co                  REAL NOT NULL
IsSynced            BIT NULL
Nh3                 REAL NOT NULL
No                  REAL NOT NULL
No2                 REAL NOT NULL
O3                  REAL NOT NULL
Pm10                REAL NOT NULL
Pm2_5               REAL NOT NULL

Таблиця 2 – Таблиця бази даних «AirQualityHistorys»
  AirQualityHistoryId     UNIQUEIDENTIFIER NOT NULL PRIMARY KEY
AirQualityId            UNIQUEIDENTIFIER NOT NULL
UserId                  UNIQUEIDENTIFIER NOT NULL
Timestamp               DATETIME2(7) NOT NULL
AqiHistory              NVARCHAR(MAX) NOT NULL

Таблиця 3 – Таблиця бази даних «AspNetRoleClaims»
Id              INT IDENTITY PRIMARY KEY
RoleId          UNIQUEIDENTIFIER NOT NULL
ClaimType       NVARCHAR(MAX) NULL
ClaimValue      NVARCHAR(MAX) NULL

Таблиця 4 – Таблиця бази даних «AspNetRoles»
Id                  UNIQUEIDENTIFIER NOT NULL PRIMARY KEY
Name                NVARCHAR(256) NULL
NormalizedName      NVARCHAR(256) NULL
ConcurrencyStamp    NVARCHAR(MAX) NULL

Таблиця 5 – Таблиця бази даних «AspNetUserClaims»
Id              INT IDENTITY PRIMARY KEY
UserId          UNIQUEIDENTIFIER NOT NULL
ClaimType       NVARCHAR(MAX) NULL
ClaimValue      NVARCHAR(MAX) NULL

Таблиця 6 – Таблиця бази даних «AspNetUserLogins»
LoginProvider         NVARCHAR(450) NOT NULL PRIMARY KEY
ProviderKey           NVARCHAR(450) NOT NULL PRIMARY KEY
ProviderDisplayName   NVARCHAR(MAX) NULL
UserId                UNIQUEIDENTIFIER NOT NULL

Таблиця 7 – Таблиця бази даних «AspNetUserRoles»
UserId    UNIQUEIDENTIFIER NOT NULL PRIMARY KEY
RoleId    UNIQUEIDENTIFIER NOT NULL PRIMARY KEY

Таблиця 8 – Таблиця бази даних «AspNetUsers»
Id                      UNIQUEIDENTIFIER NOT NULL PRIMARY KEY
Photo                   NVARCHAR(MAX) NULL
IsBanned                BIT NOT NULL
UserName                NVARCHAR(256) NULL
NormalizedUserName      NVARCHAR(256) NULL
Email                   NVARCHAR(256) NULL
NormalizedEmail         NVARCHAR(256) NULL
EmailConfirmed          BIT NOT NULL
PasswordHash            NVARCHAR(MAX) NULL
SecurityStamp           NVARCHAR(MAX) NULL
ConcurrencyStamp        NVARCHAR(MAX) NULL
PhoneNumber             NVARCHAR(MAX) NULL
PhoneNumberConfirmed    BIT NOT NULL
TwoFactorEnabled        BIT NOT NULL
LockoutEnd              DATETIMEOFFSET(7) NULL
LockoutEnabled          BIT NOT NULL
AccessFailedCount       INT NOT NULL

Таблиця 9 – Таблиця бази даних «AspNetUserTokens»
UserId          UNIQUEIDENTIFIER NOT NULL PRIMARY KEY
LoginProvider   NVARCHAR(450) NOT NULL PRIMARY KEY
Name            NVARCHAR(450) NOT NULL PRIMARY KEY
Value           NVARCHAR(MAX) NULL

Таблиця 10 – Таблиця бази даних «Locations»	
LocationId    UNIQUEIDENTIFIER NOT NULL PRIMARY KEY
Latitude      FLOAT NOT NULL
Longitude     FLOAT NOT NULL
UserId       UNIQUEIDENTIFIER NOT NULL


Таблиця 11 – Специфікації API
МетодШляхОписPOST/api/admin/assign-admin-roleПризначає роль адміністратора користувачу. Потребує дані користувача у тілі запиту.GET/api/admin/userОтримує список усіх користувачів для адміністративного перегляду або управління.POST/api/admin/ban/{userId}Блокує користувача за заданим userId. Доступно лише адміністраторам.GET/api/air-pollution/IoTОтримує дані про забруднення повітря, зібрані з IoT-пристроїв у реальному часі.GET/api/air-pollution/{userId}Отримує індивідуальні дані про якість повітря, пов’язані з певним користувачем.GET/api/air-pollution/historyПовертає історичні дані про рівень забруднення повітря за певний період.POST/api/auth/registerРеєструє нового користувача в системі.POST/api/auth/login-with-googleАутентифікація користувача через Google OAuth.POST/api/auth/login-with-githubАутентифікація користувача через GitHub OAuth.POST/api/auth/loginВхід користувача за допомогою email/паролю.PUT/api/auth/logoutВихід користувача з системи. Завершує активну сесію.POST/api/locationЗберігає або оновлює інформацію про місцезнаходження користувача або пристрою.GET/api/locationОтримує поточне або останнє збережене місцезнаходження користувача.PUT/api/user/edit-profileОновлює дані профілю користувача (наприклад, ім’я, email, фото тощо).GET/api/user/{userId}Отримує публічну або детальну інформацію про користувача за userId.POST/api/user/forgot-passwordЗапускає процес відновлення пароля — надсилає листа з посиланням на скидання.POST/api/user/reset-user-passwordСкидає пароль користувача за допомогою токена, отриманого на email.
4 ВИСНОВКИ
Під час виконання лабораторної роботи було розроблено серверну частину програмної системи.


Додаток А
Посилання на відео та хронологічний опис

Відеозапис доповіді на YouTube: https://youtu.be/MwpGs-nSpRc
Хронологічний опис доповіді: 
0:00 Вступ 
00:10 ER-діаграма БД 
0:34 Поянення системи токенів 
1:10 Взаємодія з таблицею Users 
7:11 Взаємодія з таблицею Location 
10:37 Взаємодія з таблицею AirPollution 
15:00 Взаємодія з таблицею Animals 
16:00 Запити Аунтефікації

Додаток Б
Графічні моделі


Рисунок Б.1 – UML діаграма прецедентів взаємодії адміністратора та користувача з системою

Рисунок Б.2 – UML діаграма прецедентів взаємодії IoT-пристроїв з системою

Рисунок Б.3 – Діаграма розгортання

Рисунок Б.4 – UML діаграма діяльності


Рисунок Б.5 – ER-діаграма БД



Додаток В
Програмний код

В.1 Фрагменти програмного коду для демонстрації взаємодії серверної частини з БД
1  using Microsoft.AspNetCore.Identity;
2  using Microsoft.EntityFrameworkCore;
3  using AirSense.Application.Interfaces.Repositories;
4  using AirSense.Domain.UserAggregate;
5  using AirSense.Infrastructure.Database;

6  namespace AirSense.Infrastructure.Repositories;
7  public class AuthRepository(UserManager<User> userManager,
8      AirSenseContext context) : IAuthRepository
9  {
10     public async Task<User> FindByEmailAsync(string email,
11         CancellationToken cancellationToken)
12     {
13         return await userManager.FindByEmailAsync(email);
14     }

15     public async Task<IdentityResult> AddLoginAsync(User user, UserLoginInfo
16         loginInfo, CancellationToken cancellationToken)
17     {
18         return await userManager.AddLoginAsync(user, loginInfo);
19     }

20     public async Task<IList<UserLoginInfo>> GetLoginsAsync(User user,
21         CancellationToken cancellationToken)
22     {
23         return await userManager.GetLoginsAsync(user);
24     }

25     public async Task<IdentityResult> RemoveTokenAsync(string token,
26         CancellationToken cancellationToken)
27     {
28         var userToken = await context.UserTokens.FirstOrDefaultAsync(z =>
29             z.Value == token, cancellationToken);
30         if (userToken == null)
31         {
32             return IdentityResult.Failed(new IdentityError { Description = "Token not found." });
33         }
34         context.UserTokens.Remove(userToken);
35         await context.SaveChangesAsync(cancellationToken);
36         return IdentityResult.Success;
37     }
38 }

В.2 Фрагменти програмного коду для демонстрації взаємодії серверної частини з клієнтами
1  [HttpPost("register")]
2  public async Task<IActionResult> Register([FromBody] RegisterCommand
3      command, CancellationToken cancellationToken)
4  {
5      var result = await mediator.Send(command, cancellationToken);
6      if (result.IsSuccess)
7      {
8          return Ok(new { Message = "User registered successfully." });
9      }
10     return BadRequest(result.ErrorMessage);
11 }

12 using MediatR;
13 using AirSense.Application.CQRS.Dtos.Commands;

14 namespace AirSense.Application.CQRS.Commands.Auth.Register;
15 public record RegisterCommand(string UserName, string Email, string Password) :
16     IRequest<AuthResponseDto>;

17 using MediatR;
18 using Microsoft.AspNetCore.Identity;
19 using AirSense.Application.CQRS.Dtos.Commands;
20 using AirSense.Domain.UserAggregate;

21 namespace AirSense.Application.CQRS.Commands.Auth.Register;
22 public class RegisterCommandHandler(UserManager<User> userManager,
23     RoleManager<IdentityRole<Guid>> roleManager) :
24     IRequestHandler<RegisterCommand, AuthResponseDto>
25 {
26     public async Task<AuthResponseDto> Handle(RegisterCommand request,
27         CancellationToken cancellationToken)
28     {
29         if (string.IsNullOrWhiteSpace(request.Email)
30             || !request.Email.Contains("@"))
31         {
32             return CreateLoginResult(false, "The email provided is invalid");
33         }

34         var existingUser = await userManager.FindByEmailAsync(request.Email);
35         if (existingUser != null)
36         {
37             return CreateLoginResult(false, "A user with this email already exists");
38         }

39         if (string.IsNullOrWhiteSpace(request.UserName))
40         {
41             return CreateLoginResult(false, "The username cannot be empty");
42         }

43         if (string.IsNullOrWhiteSpace(request.Password) || request.Password.Length < 6)
44         {
45             return CreateLoginResult(false, "The password must be at least 6 characters long");
46         }

47         var user = new User
48         {
49             UserName = request.UserName,
50             Email = request.Email
51         };

52         var createResult = await userManager.CreateAsync(user, request.Password);
53         if (!createResult.Succeeded)
54         {
55             return CreateLoginResult(false, "User registration failed");
56         }

57         if (!await roleManager.RoleExistsAsync("Client"))
58         {
59             await roleManager.CreateAsync(new IdentityRole<Guid>("Client"));
60         }

61         await userManager.AddToRoleAsync(user, "Client");
62         return CreateLoginResult(true);
63     }

64     private AuthResponseDto CreateLoginResult(bool success, string errorMessage = null, string token = null)
65     {
66         return new AuthResponseDto { IsSuccess = success, ErrorMessage = errorMessage, Token = token };
67     }
68 }
